
import { useParams } from "react-router-dom";
import { Helmet } from "react-helmet";
import { useState, useEffect } from "react";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  forumSpaces, 
  loadForumSpaces, 
  loadForumPostsBySpace,
  updateForumPosts,
  createForumPost,
  ForumPost 
} from "@/lib/communityData";
import { MessageSquare, Calendar, Users, Plus, Loader2, Bell, PinIcon } from "lucide-react";
import { Card } from "@/components/ui/card";
import { Avatar } from "@/components/ui/avatar";
import CommunityPostEditor from "@/components/CommunityPostEditor";
import { toast } from "sonner";
import { motion } from "framer-motion";

const CommunitySpaceDetails = () => {
  const { slug } = useParams<{ slug: string }>();
  const [spacePosts, setSpacePosts] = useState<ForumPost[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isFollowing, setIsFollowing] = useState(false);
  const [activeTab, setActiveTab] = useState("discussions");
  
  // Function to convert slug back to space name
  const getSpaceName = (slug: string) => {
    const spaceName = slug.replace(/-/g, ' ');
    
    // Find the space in our data
    let foundSpace = null;
    for (const category of forumSpaces) {
      const space = category.spaces.find(
        (s) => s.name.toLowerCase() === spaceName.toLowerCase()
      );
      if (space) {
        foundSpace = space;
        break;
      }
    }
    
    return {
      name: foundSpace?.name || spaceName,
      icon: foundSpace?.icon || "MessageSquare"
    };
  };
  
  // Load data from Supabase
  useEffect(() => {
    const loadData = async () => {
      setIsLoading(true);
      
      try {
        // Load spaces first to properly identify the space name
        await loadForumSpaces();
        
        // Get proper space name from slug
        const spaceName = getSpaceName(slug || "").name;
        
        // Fetch only posts for this specific space
        const posts = await loadForumPostsBySpace(spaceName);
        setSpacePosts(posts);
      } catch (error) {
        console.error('Error loading space data:', error);
        toast.error('Failed to load space data');
      } finally {
        setIsLoading(false);
      }
    };
    
    loadData();
  }, [slug]);

  const space = getSpaceName(slug || "");

  const handleNewPostCreated = async (newPost: Partial<ForumPost>) => {
    try {
      // Prepare post data without an ID (will be generated by the database)
      const postData = {
        author: {
          name: "You",
          role: "Member",
          avatar: "https://images.unsplash.com/photo-1506744038136-46273834b3fb",
        },
        postedIn: space.name,
        title: newPost.title || "Untitled",
        content: newPost.content || "",
        likes: 0,
        comments: 0,
        bookmarked: false
      };
      
      // Create a temporary post for optimistic UI update
      const tempPost: ForumPost = {
        ...postData,
        id: `temp-${Date.now()}`,  // Clearly marked temporary ID
        timeAgo: "just now"
      };
      
      // Update local state immediately for better UX (optimistic update)
      setSpacePosts(currentPosts => [tempPost, ...currentPosts]);
      
      // Call API to create the post with a permanent ID
      const savedPost = await createForumPost(postData);
      
      // Update the local state with the permanent post data from the server
      setSpacePosts(currentPosts => 
        currentPosts.map(post => 
          // Replace the temporary post with the permanent one
          (typeof post.id === 'string' && post.id.startsWith('temp-')) 
            ? savedPost 
            : post
        )
      );
      
      toast.success("Post created successfully!");
    } catch (error) {
      console.error('Error creating post:', error);
      // Remove the temporary post in case of error
      setSpacePosts(currentPosts => 
        currentPosts.filter(post => 
          !(typeof post.id === 'string' && post.id.startsWith('temp-'))
        )
      );
      toast.error("Failed to create post. Please try again.");
    }
  };

  const fadeIn = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { duration: 0.5 } }
  };

  if (isLoading) {
    return (
      <>
        <Header />
        <main className="pt-24 pb-16 min-h-screen bg-slate-50">
          <div className="container mx-auto px-4 text-center py-12">
            <div className="flex items-center justify-center">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
              <span className="ml-2">Loading space content...</span>
            </div>
          </div>
        </main>
        <Footer />
      </>
    );
  }

  return (
    <>
      <Helmet>
        <title>{space.name} | Sanghos Community</title>
        <meta name="description" content={`Posts and discussions in the ${space.name} space`} />
      </Helmet>

      <Header />

      <main className="pt-24 pb-16 min-h-screen bg-slate-50">
        <div className="container px-4 md:px-6 mx-auto">
          <motion.div 
            initial="hidden"
            animate="visible"
            variants={fadeIn}
          >
            <div className="mb-8">
              <div className="flex items-center gap-2 mb-2">
                <Button variant="link" className="p-0" onClick={() => window.history.back()}>
                  Back to Community
                </Button>
              </div>
              
              <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4 bg-white p-6 rounded-lg shadow-sm border">
                <div className="flex items-center">
                  <div className="bg-brand-subtle/20 p-3 rounded-full mr-4">
                    {renderSpaceIcon(space.icon)}
                  </div>
                  <div>
                    <h1 className="text-3xl font-bold">{space.name}</h1>
                    <p className="text-muted-foreground mt-1">
                      Discussions, posts, and resources for {space.name}
                    </p>
                  </div>
                </div>
                <div className="flex gap-2">
                  <Button variant="outline" size="icon" className="h-10 w-10">
                    <Bell className="h-4 w-4" />
                  </Button>
                  <Button 
                    variant={isFollowing ? "default" : "outline"}
                    className={isFollowing ? "bg-brand-primary hover:bg-brand-primary/90" : ""}
                    onClick={toggleFollow}
                  >
                    {isFollowing ? "Following" : "Follow Space"}
                  </Button>
                </div>
              </div>
            </div>
          </motion.div>
          
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-2">
              <Tabs defaultValue="discussions" onValueChange={setActiveTab}>
                <TabsList className="mb-6">
                  <TabsTrigger value="discussions" className="flex items-center gap-1">
                    <MessageSquare className="h-4 w-4" />
                    <span>Discussions</span>
                  </TabsTrigger>
                  <TabsTrigger value="resources" className="flex items-center gap-1">
                    <Calendar className="h-4 w-4" />
                    <span>Resources</span>
                  </TabsTrigger>
                  <TabsTrigger value="members" className="flex items-center gap-1">
                    <Users className="h-4 w-4" />
                    <span>Members</span>
                  </TabsTrigger>
                </TabsList>
                
                <TabsContent value="discussions">
                  <div className="flex justify-between items-center mb-6">
                    <h2 className="text-xl font-semibold">Discussions</h2>
                    <CommunityPostEditor 
                      onPostCreated={handleNewPostCreated}
                      buttonLabel="Create Post"
                      initialPost={{ postedIn: space.name }}
                    />
                  </div>
                  
                  {spacePosts.length > 0 ? (
                    <motion.div 
                      className="space-y-6"
                      initial="hidden"
                      animate="visible"
                      variants={{
                        visible: {
                          transition: {
                            staggerChildren: 0.1
                          }
                        }
                      }}
                    >
                      {spacePosts.map((post) => (
                        <motion.div 
                          key={post.id}
                          variants={{
                            hidden: { opacity: 0, y: 20 },
                            visible: { opacity: 1, y: 0 }
                          }}
                        >
                          <Card className="overflow-hidden border border-slate-200">
                            {post.isPinned && (
                              <div className="bg-brand-subtle/20 px-4 py-1 flex items-center justify-between text-sm">
                                <div className="flex items-center">
                                  <PinIcon className="h-3 w-3 mr-1" />
                                  <span>Pinned post</span>
                                </div>
                                <Badge variant="outline" className="text-xs py-0">Featured</Badge>
                              </div>
                            )}
                            <div className="p-4">
                              <div className="flex justify-between items-start mb-3">
                                <div className="flex items-center gap-3">
                                  <Avatar className="h-10 w-10">
                                    <img src={post.author.avatar} alt={post.author.name} />
                                  </Avatar>
                                  <div>
                                    <div className="flex items-center gap-2">
                                      <span className="font-medium">{post.author.name}</span>
                                      <span className="text-xs px-2 py-1 bg-slate-100 rounded-full">{post.author.role}</span>
                                      {post.author.tag && (
                                        <span className="text-xs px-2 py-1 bg-brand-peach/20 text-brand-primary rounded-full">{post.author.tag}</span>
                                      )}
                                    </div>
                                    <div className="text-xs text-muted-foreground">
                                      {post.timeAgo}
                                    </div>
                                  </div>
                                </div>
                              </div>
                              
                              <h2 className="text-xl font-semibold mb-2">{post.title}</h2>
                              <div className="text-sm mb-3 whitespace-pre-line">
                                {post.content}
                              </div>

                              <div className="flex items-center gap-3 mt-4 pt-3 border-t">
                                <Button variant="ghost" size="sm" className="text-muted-foreground">
                                  <MessageSquare className="h-4 w-4 mr-1" />
                                  {post.comments} Comments
                                </Button>
                                <Button variant="ghost" size="sm" className="text-muted-foreground">
                                  <svg className="h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                    <path d="M7 10v12" />
                                    <path d="M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2h0a3.13 3.13 0 0 1 3 3.88Z" />
                                  </svg>
                                  {post.likes}
                                </Button>
                              </div>
                            </div>
                          </Card>
                        </motion.div>
                      ))}
                    </motion.div>
                  ) : (
                    <Card className="p-6 text-center">
                      <h3 className="text-lg font-medium mb-2">No posts yet</h3>
                      <p className="text-muted-foreground mb-4">Be the first to start a conversation in this space!</p>
                      <CommunityPostEditor 
                        onPostCreated={handleNewPostCreated}
                        buttonLabel="Create Post"
                        initialPost={{ postedIn: space.name }}
                      />
                    </Card>
                  )}
                </TabsContent>

                <TabsContent value="resources">
                  <div className="space-y-6">
                    <div className="flex justify-between items-center mb-6">
                      <h2 className="text-xl font-semibold">Resources</h2>
                      <Button>
                        <Plus className="h-4 w-4 mr-2" /> Add Resource
                      </Button>
                    </div>

                    <Card className="p-6">
                      <h3 className="text-lg font-semibold mb-4">Popular Resources</h3>
                      <div className="divide-y">
                        <div className="py-4">
                          <div className="flex items-center justify-between">
                            <div className="flex items-start gap-3">
                              <div className="bg-slate-100 p-2 rounded">
                                <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                  <path d="M14 3v4a1 1 0 0 0 1 1h4" />
                                  <path d="M17 21H7a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7l5 5v11a2 2 0 0 1-2 2z" />
                                </svg>
                              </div>
                              <div>
                                <h4 className="font-medium">Getting Started Guide</h4>
                                <p className="text-sm text-muted-foreground">An introduction to mindfulness practices</p>
                                <div className="text-xs text-muted-foreground mt-1">Added 3 days ago • PDF • 2.3 MB</div>
                              </div>
                            </div>
                            <Button variant="ghost" size="sm">Download</Button>
                          </div>
                        </div>
                        <div className="py-4">
                          <div className="flex items-center justify-between">
                            <div className="flex items-start gap-3">
                              <div className="bg-slate-100 p-2 rounded">
                                <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                  <rect width="18" height="18" x="3" y="3" rx="2" />
                                  <path d="m9 9 6 6" />
                                  <path d="m15 9-6 6" />
                                </svg>
                              </div>
                              <div>
                                <h4 className="font-medium">Meditation Techniques Video</h4>
                                <p className="text-sm text-muted-foreground">Basic meditation practices for beginners</p>
                                <div className="text-xs text-muted-foreground mt-1">Added 1 week ago • Video • 15 min</div>
                              </div>
                            </div>
                            <Button variant="ghost" size="sm">Watch</Button>
                          </div>
                        </div>
                      </div>
                    </Card>
                  </div>
                </TabsContent>

                <TabsContent value="members">
                  <div className="space-y-6">
                    <div className="flex justify-between items-center mb-6">
                      <h2 className="text-xl font-semibold">Members</h2>
                      <Button variant="outline">
                        <Plus className="h-4 w-4 mr-2" /> Invite
                      </Button>
                    </div>

                    <Card className="p-6">
                      <h3 className="text-lg font-semibold mb-4">Active Members</h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {[...Array(6)].map((_, i) => (
                          <div key={i} className="flex items-center gap-3 p-3 rounded-lg hover:bg-slate-50">
                            <Avatar className="h-10 w-10">
                              <img 
                                src={`https://images.unsplash.com/photo-${1500000000000 + i * 10000000}?w=400&auto=format&fit=crop&q=60&ixlib=rb-4.0.3`} 
                                alt="Member" 
                              />
                            </Avatar>
                            <div>
                              <div className="font-medium">Member Name</div>
                              <div className="text-xs text-muted-foreground">Active 1 day ago</div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </Card>
                  </div>
                </TabsContent>
              </Tabs>
            </div>
            
            <div>
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
              >
                <Card className="p-6 mb-6">
                  <h3 className="text-lg font-semibold mb-4">About this Space</h3>
                  <p className="text-sm text-muted-foreground mb-6">
                    This is a dedicated space for discussions about {space.name}. 
                    Share your thoughts, ask questions, and connect with others interested in this topic.
                  </p>
                  
                  <div className="space-y-4">
                    <div className="flex items-center justify-between text-sm">
                      <div className="flex items-center text-muted-foreground">
                        <MessageSquare className="h-4 w-4 mr-2" />
                        <span>Total posts</span>
                      </div>
                      <span className="font-medium">{spacePosts.length}</span>
                    </div>
                    
                    <div className="flex items-center justify-between text-sm">
                      <div className="flex items-center text-muted-foreground">
                        <Users className="h-4 w-4 mr-2" />
                        <span>Members</span>
                      </div>
                      <span className="font-medium">{Math.floor(Math.random() * 80) + 20}</span>
                    </div>
                    
                    <div className="flex items-center justify-between text-sm">
                      <div className="flex items-center text-muted-foreground">
                        <Calendar className="h-4 w-4 mr-2" />
                        <span>Created</span>
                      </div>
                      <span className="font-medium">Jan 12, 2025</span>
                    </div>
                  </div>
                </Card>

                <Card className="p-6">
                  <h3 className="text-lg font-semibold mb-4">Related Spaces</h3>
                  <div className="space-y-4">
                    {forumSpaces.flatMap(category => category.spaces)
                      .filter(s => s.name !== space.name)
                      .slice(0, 3)
                      .map((relatedSpace) => (
                        <div key={relatedSpace.name} className="flex items-center justify-between">
                          <div className="flex items-center">
                            {relatedSpace.icon === "MessageSquare" && <MessageSquare className="h-4 w-4 mr-2 text-muted-foreground" />}
                            {relatedSpace.icon === "Calendar" && <Calendar className="h-4 w-4 mr-2 text-muted-foreground" />}
                            {relatedSpace.icon === "Users" && <Users className="h-4 w-4 mr-2 text-muted-foreground" />}
                            <span>{relatedSpace.name}</span>
                          </div>
                          <Badge variant="outline">{relatedSpace.count || 0} posts</Badge>
                        </div>
                      ))
                    }
                    <Button variant="link" className="w-full mt-2">View More Spaces</Button>
                  </div>
                </Card>
              </motion.div>
            </div>
          </div>
        </div>
      </main>

      <Footer />
    </>
  );
};

export default CommunitySpaceDetails;

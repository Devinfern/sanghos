import { useParams } from "react-router-dom";
import { Helmet } from "react-helmet";
import { useState, useEffect } from "react";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  forumSpaces, 
  loadForumSpaces, 
  loadForumPostsBySpace,
  createForumPost,
  ForumPost 
} from "@/lib/api/forum";
import { MessageSquare, Calendar, Users, Loader2 } from "lucide-react";
import { toast } from "sonner";
import SpaceHeader from "@/components/community/SpaceHeader";
import SpaceDiscussions from "@/components/community/SpaceDiscussions";
import SpaceResources from "@/components/community/SpaceResources";
import SpaceMembers from "@/components/community/SpaceMembers";
import SpaceSidebar from "@/components/community/SpaceSidebar";

const CommunitySpaceDetails = () => {
  const { slug } = useParams<{ slug: string }>();
  const [spacePosts, setSpacePosts] = useState<ForumPost[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("discussions");
  
  // Function to convert slug back to space name
  const getSpaceName = (slug: string) => {
    const spaceName = slug.replace(/-/g, ' ');
    
    // Find the space in our data
    let foundSpace = null;
    for (const category of forumSpaces) {
      const space = category.spaces.find(
        (s) => s.name.toLowerCase() === spaceName.toLowerCase()
      );
      if (space) {
        foundSpace = space;
        break;
      }
    }
    
    return {
      name: foundSpace?.name || spaceName,
      icon: foundSpace?.icon || "MessageSquare"
    };
  };
  
  // Load data from Supabase
  useEffect(() => {
    const loadData = async () => {
      setIsLoading(true);
      
      try {
        // Load spaces first to properly identify the space name
        await loadForumSpaces();
        
        // Get proper space name from slug
        const spaceName = getSpaceName(slug || "").name;
        
        // Fetch only posts for this specific space
        const posts = await loadForumPostsBySpace(spaceName);
        setSpacePosts(posts);
      } catch (error) {
        console.error('Error loading space data:', error);
        toast.error('Failed to load space data');
      } finally {
        setIsLoading(false);
      }
    };
    
    loadData();
  }, [slug]);

  const space = getSpaceName(slug || "");

  const handleNewPostCreated = async (newPost: Partial<ForumPost>) => {
    try {
      // Prepare post data without an ID (will be generated by the database)
      const postData = {
        author: {
          name: "You",
          role: "Member",
          avatar: "https://images.unsplash.com/photo-1506744038136-46273834b3fb",
        },
        postedIn: space.name,
        title: newPost.title || "Untitled",
        content: newPost.content || "",
        likes: 0,
        comments: 0,
        bookmarked: false
      };
      
      // Create a temporary post for optimistic UI update
      const tempPost: ForumPost = {
        ...postData,
        id: `temp-${Date.now()}`,  // Clearly marked temporary ID
        timeAgo: "just now"
      };
      
      // Update local state immediately for better UX (optimistic update)
      setSpacePosts(currentPosts => [tempPost, ...currentPosts]);
      
      // Call API to create the post with a permanent ID
      const savedPost = await createForumPost(postData);
      
      // Update the local state with the permanent post data from the server
      setSpacePosts(currentPosts => 
        currentPosts.map(post => 
          // Replace the temporary post with the permanent one
          (typeof post.id === 'string' && post.id.startsWith('temp-')) 
            ? savedPost 
            : post
        )
      );
      
      toast.success("Post created successfully!");
    } catch (error) {
      console.error('Error creating post:', error);
      // Remove the temporary post in case of error
      setSpacePosts(currentPosts => 
        currentPosts.filter(post => 
          !(typeof post.id === 'string' && post.id.startsWith('temp-'))
        )
      );
      toast.error("Failed to create post. Please try again.");
    }
  };

  if (isLoading) {
    return (
      <>
        <Header />
        <main className="pt-24 pb-16 min-h-screen bg-slate-50">
          <div className="container mx-auto px-4 text-center py-12">
            <div className="flex items-center justify-center">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
              <span className="ml-2">Loading space content...</span>
            </div>
          </div>
        </main>
        <Footer />
      </>
    );
  }

  return (
    <>
      <Helmet>
        <title>{space.name} | Sanghos Community</title>
        <meta name="description" content={`Posts and discussions in the ${space.name} space`} />
      </Helmet>

      <Header />

      <main className="pt-24 pb-16 min-h-screen bg-slate-50">
        <div className="container px-4 md:px-6 mx-auto">
          <SpaceHeader spaceName={space.name} spaceIcon={space.icon} />
          
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-2">
              <Tabs defaultValue="discussions" onValueChange={setActiveTab}>
                <TabsList className="mb-6">
                  <TabsTrigger value="discussions" className="flex items-center gap-1">
                    <MessageSquare className="h-4 w-4" />
                    <span>Discussions</span>
                  </TabsTrigger>
                  <TabsTrigger value="resources" className="flex items-center gap-1">
                    <Calendar className="h-4 w-4" />
                    <span>Resources</span>
                  </TabsTrigger>
                  <TabsTrigger value="members" className="flex items-center gap-1">
                    <Users className="h-4 w-4" />
                    <span>Members</span>
                  </TabsTrigger>
                </TabsList>
                
                <TabsContent value="discussions">
                  <SpaceDiscussions 
                    spacePosts={spacePosts} 
                    spaceName={space.name}
                    onNewPostCreated={handleNewPostCreated} 
                  />
                </TabsContent>

                <TabsContent value="resources">
                  <SpaceResources />
                </TabsContent>

                <TabsContent value="members">
                  <SpaceMembers />
                </TabsContent>
              </Tabs>
            </div>
            
            <div>
              <SpaceSidebar 
                spaceName={space.name} 
                spacePosts={spacePosts}
                forumSpaces={forumSpaces}
              />
            </div>
          </div>
        </div>
      </main>

      <Footer />
    </>
  );
};

export default CommunitySpaceDetails;
